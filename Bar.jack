class Bar {
  field Array p;
  field int direction;
  field boolean debug;

  constructor Bar new(boolean d) {
	let p = Array.new(16);
	let direction = 0;
	let debug = d;
	return this;
  }

  method void inspect() {
	var int i, end;
	do Output.moveCursor(10, 20);
	let i = 20;
	while (i < 64) {
	  do Output.printChar(32);
	  let i = i + 1;
	}
	do Output.moveCursor(10, 20);
	let i = direction;
	let end = i + 8;
	do Output.printString("Bar[");
	while (i < end) {
	  do Output.printInt(p[i]);
	  do Output.printChar(32);
	  let i = i + 1;
	}
	do Output.printString("]");
	return;
  }

  method boolean reset(int l, int c) {
	var int ok;
	// horizontal
	let p[0] = l;
	let p[1] = c - 1;
	let p[2] = l;
	let p[3] = c;
	let p[4] = l;
	let p[5] = c + 1;
	let p[6] = l;
	let p[7] = c + 2;

	// vertical
	let p[8] = l - 1;
	let p[9] = c;
	let p[10] = l;
	let p[11] = c;
	let p[12] = l + 1;
	let p[13] = c;
	let p[14] = l + 2;
	let p[15] = c;

	let direction = 0;
	let ok = Tetris.allowMovement(p[0], p[1],
								  p[2], p[3],
								  p[4], p[5],
								  p[6], p[7]);

	if (ok) { do paint(); }

	return ok;
  }

  method void displace(int v, int h) {
	let p[0] = p[0] + v;
	let p[1] = p[1] + h;
	let p[2] = p[2] + v;
	let p[3] = p[3] + h;
	let p[4] = p[4] + v;
	let p[5] = p[5] + h;
	let p[6] = p[6] + v;
	let p[7] = p[7] + h;

	let p[8] = p[8] + v;
	let p[9] = p[9] + h;
	let p[10] = p[10] + v;
	let p[11] = p[11] + h;
	let p[12] = p[12] + v;
	let p[13] = p[13] + h;
	let p[14] = p[14] + v;
	let p[15] = p[15] + h;

	return;
  }

  method boolean rotate() {
	var boolean ok, horizontal;
	var int i;

	let horizontal = direction = 0;
	if (horizontal) {
	  let i = 8;
	} else {
	  let i = 0;
	}
	let ok = Tetris.allowMovement(p[i],     p[1 + i],
								  p[2 + i], p[3 + i],
								  p[4 + i], p[5 + i],
								  p[6 + i], p[7 + i]);

	if (ok) {
	  do erase3(p[direction],     p[direction + 1],
				p[direction + 4], p[direction + 5],
				p[direction + 6], p[direction + 7]);

	  if (horizontal) {
		let direction = 8;
	  } else {
		let direction = 0;
	  }
	  if (debug) { do inspect(); }
	  
	  do paint3(p[direction],     p[direction + 1],
				p[direction + 4], p[direction + 5],
				p[direction + 6], p[direction + 7]);

	}

	return ok;
  }

  method boolean moveDown() {
	var boolean ok, horizontal;
	var int i;
	let horizontal = direction = 0;

	let ok = Tetris.allowMovement(p[direction]     + 1, p[direction + 1],
								  p[direction + 2] + 1, p[direction + 3],
								  p[direction + 4] + 1, p[direction + 5],
								  p[direction + 6] + 1, p[direction + 7]);

	if (ok) {
	  if (horizontal) {
		do erase();
	  } else {
		do erase1(p[8], p[9]);
	  }

	  do displace(1, 0);
	  if (debug) { do inspect(); }
	  
	  if (horizontal) {
		do paint();
	  } else {
		do paint1(p[14], p[15]);
	  }
	}

	return ok;
  }

  method boolean moveLeft() {
	return sideStep(-1, 6, 7, 0, 1);
  }

  method boolean moveRight() {
	return sideStep(1, 0, 1, 6, 7);
  }

  /**
   *@private
   *@param h - 1 for left and -1 for right
   *@param el - line to be erased
   *@param ec - column to be erased
   *@param pl - line to be painted
   *@param pc - column to be painted
   */
  method boolean sideStep(int h, int el, int ec, int pl, int pc) {
	var boolean ok, horizontal;
	let horizontal = direction = 0;
	let ok = Tetris.allowMovement(p[direction]    , p[direction + 1] + h,
								  p[direction + 2], p[direction + 3] + h,
								  p[direction + 4], p[direction + 5] + h,
								  p[direction + 6], p[direction + 7] + h);

	if (ok) {
	  if (horizontal) {
		do erase1(p[el], p[ec]);
	  } else {
		do erase();
	  }

	  do displace(0, h);
	  if (debug) { do inspect(); }
	  
	  if (horizontal) {
		do paint1(p[pl], p[pc]);
	  } else {
		do paint();
	  }
	}

	return ok;
  }

  method void paint() {
	var int l, c, i;

	let i = 0;
	while (i < 8) {
	  let l = p[i + direction];
	  let c = p[i + direction + 1];
	  let i = i + 2;
	  if ((l > 0) & (c > 0)) {
		do UI.paintSquare(l, c);
	  }
	}

	return;
  }

  /**@private*/
  method void paint1(int l, int c) {
	if ((l > 0) & (c > 0)) {
	  do UI.paintSquare(l, c);
	}
	return;
  }

  /**@private*/
  method void paint2(int l1, int c1, int l2, int c2) {
	if ((l1 > 0) & (c1 > 0)) {
	  do UI.paintSquare(l1, c1);
	}

	if ((l2 > 0) & (c2 > 0)) {
	  do UI.paintSquare(l2, c2);
	}

	return;
  }

  /**@private*/
  method void paint3(int l1, int c1, int l2, int c2, int l3, int c3) {
	if ((l1 > 0) & (c1 > 0)) {
	  do UI.paintSquare(l1, c1);
	}

	if ((l2 > 0) & (c2 > 0)) {
	  do UI.paintSquare(l2, c2);
	}

	if ((l3 > 0) & (c3 > 0)) {
	  do UI.paintSquare(l3, c3);
	}

	return;
  }

  method void erase() {
	var int l, c, i;

	let i = 0;
	while (i < 8) {
	  let l = p[i + direction];
	  let c = p[i + direction + 1];
	  let i = i + 2;
	  if ((l > 0) & (c > 0)) {
		do UI.paintSquareBackground(l, c);
	  }
	}

	return;
  }

  /**@private*/
  method void erase1(int l, int c) {
	if ((l > 0) & (c > 0)) {
	  do UI.paintSquareBackground(l, c);
	}
	return;
  }

  /**@private*/
  method void erase2(int l1, int c1, int l2, int c2) {
	if ((l1 > 0) & (c1 > 0)) {
	  do UI.paintSquareBackground(l1, c1);
	}

	if ((l2 > 0) & (c2 > 0)) {
	  do UI.paintSquareBackground(l2, c2);
	}

	return;
  }

  /**@private*/
  method void erase3(int l1, int c1, int l2, int c2, int l3, int c3) {
	if ((l1 > 0) & (c1 > 0)) {
	  do UI.paintSquareBackground(l1, c1);
	}

	if ((l2 > 0) & (c2 > 0)) {
	  do UI.paintSquareBackground(l2, c2);
	}

	if ((l3 > 0) & (c3 > 0)) {
	  do UI.paintSquareBackground(l3, c3);
	}

	return;
  }

  method void dispose() {
	do Memory.deAlloc(this);
	return;
  }
}
