class Grid {
  field int lines, columns, size;
  field Array array;

  constructor Grid new(int ls, int cs) {
	var int i;

	let lines = ls;
	let columns = cs;
	let size = ls * cs;
	let array = Array.new(size);

	let i = 0;
	while (i < size) {
	  let array[i] = 0;
	  let i = i + 1;
	}

	return this;
  }

  method int getAt(int l, int c) {
	var int i;
	if (l < 1) { do Sys.error(-100); }
	if (l > lines) { do Sys.error(-101); }
	if (c < 1) { do Sys.error(-102); }
	if (c > columns) { do Sys.error(-103); }

	let i = ((l - 1) * columns) + (c - 1);

	return array[i];
  }

  method void setAt(int l, int c, int v) {
	var int i;
	if (l < 1) { do Sys.error(-104); }
	if (l > lines) { do Sys.error(-105); }
	if (c < 1) { do Sys.error(-106); }
	if (c > columns) { do Sys.error(-107); }

	let i = ((l - 1) * columns) + (c - 1);

	let array[i] = v;
	return;
  }

  method void collapse(int ln) {
	var Array cp;
	var int i, l, c, ce;

	if (ln < 1) { do Sys.error(-108); }
	if (ln > lines) { do Sys.error(-109); }

	let cp = Array.new(size);

	let i = 0;
	while (i < columns) {
	  let cp[i] = 0;
	  let i = i + 1;
	}

	let ce = columns + 1;
	let l = 1;
	while (i < size) {
	  if (~(l = ln)) {
		let c = 1;
		while (c < ce) {
		  let cp[i] = getAt(l, c);
		  let c = c + 1;
		  let i = i + 1;
		}
	  } // endif
	  let l = l + 1;
	} // endwhile

	do array.dispose();
	let array = cp;
	return;
  }

  method void dispose() {
	do Memory.deAlloc(this);
	return;
  }
}
