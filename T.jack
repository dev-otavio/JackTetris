class T {
  field Array p;
  field int direction;
  field int south, west, north, east;
  field boolean debug;

  constructor T new( boolean d) {
	let p = Array.new(32);
	let debug = d;

	let south = 0;
	let west = 8;
	let north = 16;
	let east = 24;

	return this;
  }

  method void inspect() {
	var int i, end;
	do Output.moveCursor(10, 20);
	let i = 20;
	while (i < 64) {
	  do Output.printChar(32);
	  let i = i + 1;
	}

	let i = direction;
	let end = i + 8;
	do Output.moveCursor(10, 20);
	do Output.printString("T[");
	while (i < end) {
	  do Output.printInt(p[i]);
	  do Output.printChar(32);
	  let i = i + 1;
	}
	do Output.printString("]");
	return;
  }

  method void displace(int v, int h) {
	var int i;
	let i = 0;
	while (i < 32) {
	  let p[i] = p[i] + v;
	  let i = i + 1;

	  let p[i] = p[i] + h;
	  let i = i + 1;
	}

	return;
  }

  method boolean reset(int line, int column) {
	var boolean ok;
	//south
	let p[0] = line;
	let p[1] = column;
	let p[2] = line + 1;
	let p[3] = column - 1;
	let p[4] = line + 1;
	let p[5] = column;
	let p[6] = line + 1;
	let p[7] = column + 1;

	//west
	let p[8] = line;
	let p[9] = column;
	let p[10] = line - 1;
	let p[11] = column - 1;
	let p[12] = line;
	let p[13] = column - 1;
	let p[14] = line + 1;
	let p[15] = column - 1;

	// north
	let p[16] = line - 1;
	let p[17] = column - 1;
	let p[18] = line - 1;
	let p[19] = column;
	let p[20] = line - 1;
	let p[21] = column + 1;
	let p[22] = line;
	let p[23] = column;

	// east
	let p[24] = line;
	let p[25] = column;
	let p[26] = line - 1;
	let p[27] = column + 1;
	let p[28] = line;
	let p[29] = column + 1;
	let p[30] = line + 1;
	let p[31] = column + 1;

	let direction = south;

	let ok = Tetris.allowMovement(p[0], p[1],
								  p[2], p[3],
								  p[4], p[5],
								  p[6], p[7]);


	if (ok) { do paint(); }

	return ok;
  }


  method boolean rotate() {
	var boolean ok;
	var int i;

	if (direction = south) {
	  let i = west;
	} else {
	  if (direction = west) {
		let i = north;
	  } else {
		if (direction = north) {
		  let i = east;
		} else {
		  if (direction = east) {
			let i = south;
		  } else {
			do Sys.error(-269);
		  }
		}
	  }
	}

	let ok = Tetris.allowMovement(p[i],     p[1 + i],
								  p[2 + i], p[3 + i],
								  p[4 + i], p[5 + i],
								  p[6 + i], p[7 + i]);

	if (ok) {
	  // erase
	  if (direction = south) {
		do erase3(p[0], p[1], p[4], p[5], p[6], p[7]);
	  } else {
		if (direction = west) {
		  do erase2(p[12], p[13], p[14], p[15]);
		} else {
		  if (direction = north) {
			do erase2(p[16], p[17], p[18], p[19]);
		  } else {
			if (direction = east) {
			  do erase2(p[26], p[27], p[28], p[29]);
			}
		  }
		}
	  } // end erase

	  // update direction
	  if (direction = east) {
		let direction = south;
	  } else {
		let direction = direction + 8;
	  }
	  if (debug) { do inspect(); }

	  // repaint
	  if (direction = south) {
		do paint2(p[2], p[3], p[4], p[5]);
	  } else {
		if (direction = west) {
		  do paint3(p[8], p[9], p[10], p[11], p[12], p[13]);
		} else {
		  if (direction = north) {
			do paint2(p[18], p[19], p[20], p[21]);
		  } else {
			if (direction = east) {
			  do paint2(p[28], p[29], p[30], p[31]);
			}
		  }
		}
	  } // endif repaint
	} // endif ok

	return ok;
  }

  method boolean moveDown() {
	var boolean ok;
	var int i;

	let ok = Tetris.allowMovement(p[direction]     + 1, p[direction + 1],
								  p[direction + 2] + 1, p[direction + 3],
								  p[direction + 4] + 1, p[direction + 5],
								  p[direction + 6] + 1, p[direction + 7]);

	if (ok) {
	  //erase
	  if (direction = south) {
		do erase3(p[0], p[1], p[2], p[3], p[6], p[7]);
	  } else {
		if (direction = west) {
		  do erase2(p[8], p[9], p[10], p[11]);
		} else {
		  if (direction = north) {
			do erase3(p[16], p[17], p[18], p[19], p[20], p[21]);
		  } else {
			if (direction = east) {
			  do erase2(p[24], p[25], p[26], p[27]);
			}
		  }
		}
	  }

	  //update
	  do displace(1, 0);
	  if (debug) { do inspect(); }

	  //repaint
	  if (direction = south) {
		do paint3(p[2], p[3], p[4], p[5], p[6], p[7]);
	  } else {
		if (direction = west) {
		  do paint2(p[8], p[9], p[14], p[15]);
		} else {
		  if (direction = north) {
			do paint3(p[16], p[17], p[20], p[21], p[22], p[23]);
		  } else {
			if (direction = east) {
			  do paint2(p[24], p[25], p[30], p[31]);
			}
		  }
		}
	  }
	}

	return ok;
  }

  method boolean moveLeft() {
	var boolean ok;
	var int i;
	let ok = Tetris.allowMovement(p[direction]    , p[direction + 1] - 1,
								  p[direction + 2], p[direction + 3] - 1,
								  p[direction + 4], p[direction + 5] - 1,
								  p[direction + 6], p[direction + 7] - 1);

	if (ok) {
	  //erase
	  if (direction = south) {
		do erase2(p[0], p[1], p[6], p[7]);
	  } else {
		if (direction = west) {
		  do erase3(p[8], p[9], p[10], p[11], p[14], p[15]);
		} else {
		  if (direction = north) {
			do erase2(p[20], p[21], p[22], p[23]);
		  } else {
			if (direction = east) {
			  do erase3(p[26], p[27], p[28], p[29], p[30], p[31]);
			}
		  }
		}
	  }

	  //update
	  do displace(0, -1);
	  if (debug) { do inspect(); }

	  //repaint
	  if (direction = south) {
		do paint2(p[0], p[1], p[2], p[3]);
	  } else {
		if (direction = west) {
		  do paint3(p[10], p[11], p[12], p[13], p[14], p[15]);
		} else {
		  if (direction = north) {
			do paint2(p[16], p[17], p[22], p[23]);
		  } else {
			if (direction = east) {
			  do paint3(p[24], p[25], p[26], p[27], p[30], p[31]);
			}
		  }
		}
	  }
	}

	return ok;
  }

  method boolean moveRight() {
	var boolean ok;
	var int i;
	let ok = Tetris.allowMovement(p[direction]    , p[direction + 1] + 1,
								  p[direction + 2], p[direction + 3] + 1,
								  p[direction + 4], p[direction + 5] + 1,
								  p[direction + 6], p[direction + 7] + 1);

	if (ok) {
	  if (direction = south) {
		do erase2(p[0], p[1], p[2], p[3]);
	  } else {
		if (direction = west) {
		  do erase3(p[10], p[11], p[12], p[13], p[14], p[15]);
		} else {
		  if (direction = north) {
			do erase2(p[16], p[17], p[22], p[23]);
		  } else {
			if (direction = east) {
			  do erase3(p[24], p[25], p[26], p[27], p[30], p[31]);
			}
		  }
		}
	  }
   
	  //update
	  do displace(0, 1);
	  if (debug) { do inspect(); }

	  //repaint
	  if (direction = south) {
		do paint2(p[0], p[1], p[6], p[7]);
	  } else {
		if (direction = west) {
		  do paint3(p[8], p[9], p[10], p[11], p[14], p[15]);
		} else {
		  if (direction = north) {
			do paint2(p[20], p[21], p[22], p[23]);
		  } else {
			if (direction = east) {
			  do paint3(p[26], p[27], p[28], p[29], p[30], p[31]);
			}
		  }
		}
	  }
	}
	return ok; 
  }

  method void paint() {
	var int l, c, i;

	let i = 0;
	while (i < 8) {
	  let l = p[i + direction];
	  let c = p[i + direction + 1];
	  let i = i + 2;
	  if ((l > 0) & (c > 0)) {
		do UI.paintSquare(l, c);
	  }
	}
	return;
  }

  
  /**@private*/
  method void paint1(int l, int c) {
	if ((l > 0) & (c > 0)) {
	  do UI.paintSquare(l, c);
	}
	return;
  }

  /**@private*/
  method void paint2(int l1, int c1, int l2, int c2) {
	if ((l1 > 0) & (c1 > 0)) {
	  do UI.paintSquare(l1, c1);
	}

	if ((l2 > 0) & (c2 > 0)) {
	  do UI.paintSquare(l2, c2);
	}

	return;
  }

  /**@private*/
  method void paint3(int l1, int c1, int l2, int c2, int l3, int c3) {
	if ((l1 > 0) & (c1 > 0)) {
	  do UI.paintSquare(l1, c1);
	}

	if ((l2 > 0) & (c2 > 0)) {
	  do UI.paintSquare(l2, c2);
	}

	if ((l3 > 0) & (c3 > 0)) {
	  do UI.paintSquare(l3, c3);
	}

	return;
  }

  method void erase() {
	var int l, c, i;

	let i = 0;
	while (i < 8) {
	  let l = p[i + direction];
	  let c = p[i + direction + 1];
	  let i = i + 2;
	  if ((l > 0) & (c > 0)) {
		do UI.paintSquareBackground(l, c);
	  }
	}

	return;
  }

  /**@private*/
  method void erase1(int l, int c) {
	if ((l > 0) & (c > 0)) {
	  do UI.paintSquareBackground(l, c);
	}
	return;
  }

  /**@private*/
  method void erase2(int l1, int c1, int l2, int c2) {
	if ((l1 > 0) & (c1 > 0)) {
	  do UI.paintSquareBackground(l1, c1);
	}

	if ((l2 > 0) & (c2 > 0)) {
	  do UI.paintSquareBackground(l2, c2);
	}

	return;
  }

  /**@private*/
  method void erase3(int l1, int c1, int l2, int c2, int l3, int c3) {
	if ((l1 > 0) & (c1 > 0)) {
	  do UI.paintSquareBackground(l1, c1);
	}

	if ((l2 > 0) & (c2 > 0)) {
	  do UI.paintSquareBackground(l2, c2);
	}

	if ((l3 > 0) & (c3 > 0)) {
	  do UI.paintSquareBackground(l3, c3);
	}

	return;
  }

  method void dispose() {
	do Memory.deAlloc(this);
	return;
  }
}
