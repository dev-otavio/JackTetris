class Tetris {

  // last position that was occupied by the current block
  static int p1, p2, p3, p4, p5, p6, p7, p8;
  static boolean debug;
  static int interval;
  static int clockCycle, clock;
  static int points;
  static int seed;
  static int currentBlock;
  static int possibleBlocks;
  static int lines, columns;
  static boolean paused;
  static Grid grid;
  static Bar bar;
  static Box box;
  static S s;
  static SInv sinv;
  static T t;
  static L l;
  static LInv linv;

  function void incrementSeed() {
	if (seed = 32666) {
	  let seed = 1;
	} else {
	  let seed = seed + 1;
	}
	return;
  }

  function void loop() {
	var char c;
	let clock = 0;
	let paused = false;

	while (~paused) {

	  do Sys.wait(clockCycle);
	  do Tetris.tick();
	  if (clock & (Mathx.mod(clock, interval) = 0)) {
		// fall
		do Tetris.moveDown();
	  }


	  let c = Keyboard.keyPressed();
	  if (c = 130) {
		do Tetris.moveLeft();
	  } else {
		if (c = 131) {
		  do Tetris.rotate();
		} else {
		  if (c = 132) {
			do Tetris.moveRight();
		  } else {
			if (c = 133) {
			  do Tetris.moveDown();
			} else {
			  if (c = 140) {
				do Tetris.terminate("Esc key was pressed. Terminated.");
			  }
			}
		  }
		}
	  }
	} // endif c

	return;
  }

  function void terminate(String message) {
	do Output.moveCursor(22, 20);
	do Output.printString(message);
	do Sys.halt();
	return;
  }

  function void pause() {
	let paused = true;
	return;
  }

  function void repaint(int l) {
	var int any, c, v;
	while (l > 0) {
	  let any = 0;
	  let c = 10;
	  while (c > 0) {
		let v = grid.getAt(l, c);
		let any = any | v;
		if (v) {
		  do UI.paintSquare(l, c);
		} else {
		  do UI.paintSquareBackground(l, c);
		}
		let c = c - 1;
	  } // endwhile c
	  if (~any) {
		// all empty above this line, no repainting needed
		return;
	  }
	  let l = l - 1;
	} //endwhile l
	return;
  }

  function int collapse(int l) {
	var int full, any, c, v, mod;
	while (l > 0) {
	  let full = -1;
	  let any = 0;
	  let c = 10;

	  while (c > 0) {
		let v = grid.getAt(l, c);
		let full = full & v;
		let any = any | v;
		let c = c - 1;
	  } // endwhile c
	  if (full) {
		do grid.collapse(l);
		do Tetris.repaint(l);
		return l;
	  } else {
		if (~any) {
		  // all empty above this line, early return.
		  return 0;
		}
	  }
	  let l = l - 1;
	} //endwhile l

	return 0;
  }

  function void start(boolean d) {
	let debug = d;
	let seed = 0;
	let lines = 16;
	let columns = 10;
	let paused = true;
	let clockCycle = 100;
	let interval = 400;
	let points = 0;
	let possibleBlocks = 7;

	let grid = Grid.new(lines, columns);
	let bar = Bar.new(debug);
	let box = Box.new(debug);
	let s = S.new(debug);
	let sinv = SInv.new(debug);
	let t = T.new(debug);
	let l = L.new(debug);
	let linv = LInv.new(debug);

	do UI.paintBackground();
	do Tetris.printInfo();
	do Tetris.nextBlock();
	return;
  }

  function boolean allowMovement(int l1, int c1, int l2, int c2, int l3, int c3, int l4, int c4) {

	if (l1 > lines) { return false; }
	if (l2 > lines) { return false; }
	if (l3 > lines) { return false; }
	if (l4 > lines) { return false; }

	if (c1 > columns) { return false; }
	if (c1 < 1) { return false; }
	if (c2 > columns) { return false; }
	if (c2 < 1) { return false; }
	if (c3 > columns) { return false; }
	if (c3 < 1) { return false; }
	if (c4 > columns) { return false; }
	if (c4 < 1) { return false; }

	// A non positive l is valid but will raise error if passed to getAt.
	if (l1 > 0) {
	  if (grid.getAt(l1, c1)) {
		return false;
	  }
	}
	if (l2 > 0) {
	  if (grid.getAt(l2, c2)) { return false; }
	}
	if (l3 > 0) {
	  if(grid.getAt(l3, c3)) { return false; }
	}
	if (l4 > 0) {
	  if (grid.getAt(l4, c4)) { return false; }
	}

	let p1 = l1;
	let p2 = c1;
	let p3 = l2;
	let p4 = c2;
	let p5 = l3;
	let p6 = c3;
	let p7 = l4;
	let p8 = c4;

	return true;
  }

  function void moveLeft() {
	do Tetris.incrementSeed();
	if (currentBlock = 0) {
	  do bar.moveLeft();
    } else {
	  if (currentBlock = 1) {
		do box.moveLeft();
	  } else {
		if (currentBlock = 2) {
		  do sinv.moveLeft();
		} else {
		  if (currentBlock = 3) {
			do s.moveLeft();
		  } else {
			if (currentBlock = 4) {
			  do t.moveLeft();
			} else { 
			  if (currentBlock = 5) {
				do linv.moveLeft();
			  } else {
				if (currentBlock = 6) {
				  do l.moveLeft();
				}
			  }
			}
		  }
		}
	  }
	} // endif currentBlock
    return;
  }

  function void moveRight() {
	do Tetris.incrementSeed();
	if (currentBlock = 0) {
	  do bar.moveRight();
    } else {
	  if (currentBlock = 1) {
		do box.moveRight();
	  } else {
		if (currentBlock = 2) {
		  do sinv.moveRight();
		} else {
		  if (currentBlock = 3) {
			do s.moveRight();
		  } else {
			if (currentBlock = 4) {
			  do t.moveRight();
			} else { 
			  if (currentBlock = 5) {
				do linv.moveRight();
			  } else {
				if (currentBlock = 6) {
				  do l.moveRight();
				}
			  }
			}
		  }
		}
	  }
	}

	return;
  }

  function void moveDown() {
	var int line, mod;
	var boolean ok;

	do Tetris.incrementSeed();
	if (currentBlock = 0) {
	  let ok = bar.moveDown();
    } else {
	  if (currentBlock = 1) {
		let ok = box.moveDown();
	  } else {
		if (currentBlock = 2) {
		  let ok = sinv.moveDown();
		} else {
		  if (currentBlock = 3) {
			let ok = s.moveDown();
		  } else {
			if (currentBlock = 4) {
			  let ok = t.moveDown();
			} else { 
			  if (currentBlock = 5) {
				let ok = linv.moveDown();
			  } else {
				if (currentBlock = 6) {
				  let ok = l.moveDown();
				} else {
				  do Sys.error(-999);
				}
			  }
			}
		  }
		}
	  }
	}

	if (~ok) {
	  do Tetris.pause();
	  do Tetris.lock();

	  let line = Tetris.collapse(16);
	  while (line > 0) {
		let points = points + 100;
		let mod = Mathx.mod(points, 1000) = 0;
		if (mod & (interval > 100)) {
		  let interval = interval - 100;
		}
		let line =  Tetris.collapse(line);
	  }
	  do Tetris.printInfo();
	  do Tetris.nextBlock();
	}
	return;
  }
  
  function void rotate() {
	do Tetris.incrementSeed();

	if (currentBlock = 0) {
	  do bar.rotate();
    } else {
	  if (currentBlock = 1) {
		do box.rotate();
	  } else {
		if (currentBlock = 2) {
		  do sinv.rotate();
		} else {
		  if (currentBlock = 3) {
			do s.rotate();
		  } else {
			if (currentBlock = 4) {
			  do t.rotate();
			} else { 
			  if (currentBlock = 5) {
				do linv.rotate();
			  } else {
				if (currentBlock = 6) {
				  do l.rotate();
				}
			  }
			}
		  }
		}
	  }
	}

	return;
  }

  function void nextBlock() {
	var boolean ok;
	var int il, ic;
	let il = 1;
	let ic = 5;

	let currentBlock = Mathx.getNaiveRandom(seed, possibleBlocks);

	if (debug) {
	  do Output.moveCursor(2, 20);
	  do Output.printString("BLOCK: ");
	  do Output.printInt(currentBlock);
	}

	if (currentBlock = 0) {
	  let ok =  bar.reset(il, ic);
	} else {
	  if (currentBlock = 1) {
		let ok =  box.reset(il, ic);
	  } else {
		if (currentBlock = 2) {
		  let ok =  sinv.reset(il, ic);
		} else {
		  if (currentBlock = 3) {
			let ok =  s.reset(il, ic);
		  } else {
			if (currentBlock = 4) {
			  let ok =  t.reset(il, ic);
			} else {
			  if (currentBlock = 5) {
				let ok =  linv.reset(il, ic);
			  } else {
				if (currentBlock = 6) {
				  let ok =  l.reset(il, ic);
				} else {
				  do Sys.error(-666);
				}
			  }
			}
		  }
		}
	  }
	}// endif currentBlock

	if (ok) {
	  do Tetris.loop();
	} else {
	  do Tetris.terminate("No more Space Available.");
	}
	return;
  }

  function void lock() {
	do grid.setAt(p1, p2, -1);
	do grid.setAt(p3, p4, -1);
	do grid.setAt(p5, p6, -1);
	do grid.setAt(p7, p8, -1);
	return;
  }

  function void printInfo(){
	do Output.moveCursor(0, 20);
	do Output.printString("POINTS: ");
	do Output.printInt(points);

	if (debug) {
	  do Output.moveCursor(1, 20);
	  do Output.printString("INTERVAL: ");
	  do Output.printInt(interval);
	  do Output.printString("ms.");
	}
	return;
  }

  function void tick() {
	let clock = clock + clockCycle; 
	return;
  }
}
